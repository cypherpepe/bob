"use strict";(self.webpackChunkBOB_docs=self.webpackChunkBOB_docs||[]).push([[5125],{1747:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var r=n(4848),i=n(8453),o=n(1470),s=n(9365);const a={sidebar_position:2},c="Hello Bitcoin",l={id:"build/getting-started/helloworld",title:"Hello Bitcoin",description:"This guide provides step-by-step instructions on how to deploy a smart contract on BOB that interacts with Bitcoin.",source:"@site/docs/build/getting-started/helloworld.mdx",sourceDirName:"build/getting-started",slug:"/build/getting-started/helloworld",permalink:"/docs/build/getting-started/helloworld",draft:!1,unlisted:!1,editUrl:"https://github.com/bob-collective/bob/tree/master/docs/docs/build/getting-started/helloworld.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"buildSidebar",previous:{title:"Getting Started",permalink:"/docs/build/getting-started/"},next:{title:"Connect to BOB",permalink:"/docs/build/getting-started/networks"}},d={},h=[{value:"HelloBitcoin Contract",id:"hellobitcoin-contract",level:2},{value:"Overview of the contract",id:"overview-of-the-contract",level:3},{value:"Objectives",id:"objectives",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Creating the HelloBitcoin Contract",id:"creating-the-hellobitcoin-contract",level:3},{value:"Compile the Contract",id:"compile-the-contract",level:3},{value:"Deploy the HelloBitcoin Contract",id:"deploy-the-hellobitcoin-contract",level:3},{value:"Interact with the HelloBitcoin Contract",id:"interact-with-the-hellobitcoin-contract",level:3},{value:"Congratulations! You are done!",id:"congratulations-you-are-done",level:3},{value:"Extra: Publish and verify the HelloBitcoin Contract",id:"extra-publish-and-verify-the-hellobitcoin-contract",level:3},{value:"Next Steps",id:"next-steps",level:2},{value:"Join the Community",id:"join-the-community",level:3},{value:"Check out Examples",id:"check-out-examples",level:3},{value:"References",id:"references",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"hello-bitcoin",children:"Hello Bitcoin"})}),"\n",(0,r.jsx)(t.p,{children:"This guide provides step-by-step instructions on how to deploy a smart contract on BOB that interacts with Bitcoin."}),"\n",(0,r.jsxs)(t.p,{children:["BOB is EVM-based and we recommend using the ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/v0.8.24/",children:"Solidity"})," language to write your smart contracts. The base currency on BOB is ETH. Since BOB is a rollup on Ethereum, you can bridge over ETH from Ethereum to pay for transactions."]}),"\n",(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["If you are new to Solidity, we recommend checking out the ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/v0.8.24/introduction-to-smart-contracts.html#subcurrency-example",children:"Solidity getting started guide"})," to get a better understanding of the language."]})}),"\n",(0,r.jsxs)(t.p,{children:["Developing Solidity contracts is made a lot easier using a development toolchain. Two of the most popular ones are ",(0,r.jsx)(t.a,{href:"https://remix.ethereum.org/",children:"Remix"})," and ",(0,r.jsx)(t.a,{href:"https://book.getfoundry.sh/",children:"Foundry"}),". We will use these tools to develop and deploy our smart contract.\nWe will provide instructions for using Remix and Foundry."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://remix.ethereum.org/",children:"Remix"})," is a web-based IDE for writing smart contracts. This is a great option if you do not want to install any software on your computer."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://book.getfoundry.sh/",children:"Foundry"})," is a Rust-based development environment for writing smart contracts. This is a great option if you want to use a local development environment."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Solidity and a toolchain are sufficient to get you started deploying contracts on BOB. However, since BOB's purpose is to make it easy to interact with Bitcoin, we will also add parts of the BOB SDK as part of the starter kit."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://github.com/bob-collective/bob-starter-kit",children:"BOB Starter Kit"}),": The kit serves as a quick start way to develop on BOB using the BOB SDK. Note: you can deploy any EVM contract on BOB without having to use the BOB SDK contracts. They are primarily a helper when you want to interact with Bitcoin from your smart contracts."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"hellobitcoin-contract",children:"HelloBitcoin Contract"}),"\n",(0,r.jsx)(t.h3,{id:"overview-of-the-contract",children:"Overview of the contract"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"The contract allows swapping between BTC->USDT and Ordinal->USDT using the BTC relay on testnet without requiring the BTC or ordinals to be bridged to BOB."}),"\n",(0,r.jsxs)(t.li,{children:["The contract integrates the ",(0,r.jsx)(t.a,{href:"/docs/contracts/src/src/relay/LightRelay.sol/contract.LightRelay",children:"BTC relay"})," to enable trustless communication between the Bitcoin blockchain and BOB Sepolia (Testnet)."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"objectives",children:"Objectives"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Set up a development environment"}),": Learn how to set up a development environment for your BOB smart contract development."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Create a Smart Contract for BOB"}),": We will use ",(0,r.jsx)(t.a,{href:"https://github.com/bob-collective/StarterKit/blob/main/src/HelloBitcoin.sol",children:"HelloBitcoin smart contract"})," present in the developer kit."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Compile a Smart Contract for BOB"}),": Compile your HelloBitcoin smart contract using the development environment."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Deploy a Smart Contract to BOB"}),": Deploy your compiled smart contract to BOB Sepolia (Testnet)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Interact with a Smart Contract Deployed on BOB"}),": Learn how to interact with the smart contract you've deployed on BOB Sepolia (Testnet)."]}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(t.p,{children:"We start with installing the prerequisites for the development environment."}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Get Sepolia ETH and bridge them to BOB. Use the links on the ",(0,r.jsx)(t.a,{href:"/docs/build/getting-started/networks",children:"Connect to BOB"})," page."]}),"\n",(0,r.jsx)(t.li,{children:"Setup either Remix or Foundry as your development environment. If you want to get started without having to install software, use Remix. If you are planning to develop more complex contracts, use Foundry."}),"\n"]}),"\n",(0,r.jsxs)(o.A,{groupId:"dev-env",children:[(0,r.jsx)(s.A,{value:"foundry",label:"Foundry",children:(0,r.jsxs)(t.p,{children:["Follow the steps from the ",(0,r.jsx)(t.a,{href:"https://book.getfoundry.sh/getting-started/installation",children:"foundry book"})," to install the Foundry toolsuite, which contains the ",(0,r.jsx)(t.code,{children:"forge"}),", ",(0,r.jsx)(t.code,{children:"cast"}),", ",(0,r.jsx)(t.code,{children:"anvil"})," and ",(0,r.jsx)(t.code,{children:"chisel"})," tools."]})}),(0,r.jsx)(s.A,{value:"remix",label:"Remix",children:(0,r.jsxs)(t.p,{children:["Open the ",(0,r.jsx)(t.a,{href:"https://remix.ethereum.org/",children:"Remix IDE"})," in your browser."]})})]}),"\n",(0,r.jsx)(t.h3,{id:"creating-the-hellobitcoin-contract",children:"Creating the HelloBitcoin Contract"}),"\n",(0,r.jsxs)(o.A,{groupId:"dev-env",children:[(0,r.jsxs)(s.A,{value:"foundry",label:"Foundry",children:[(0,r.jsx)(t.p,{children:"Clone the starter toolkit provided."}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"git clone https://github.com/bob-collective/bob-starter-kit.git\ncd bob-starter-kit\n"})}),(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"HelloBitcoin"})," contract should already be present inside the src directory."]}),(0,r.jsx)(t.p,{children:"Checkout the contract by opening it in your favorite editor or IDE."}),(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["If you are using ",(0,r.jsx)(t.a,{href:"https://code.visualstudio.com/",children:"VSCode"}),", use the ",(0,r.jsx)(t.a,{href:"https://marketplace.visualstudio.com/items?itemName=NomicFoundation.hardhat-solidity",children:"Solidity plugin"})," to get syntax highlighting and other features."]})}),(0,r.jsxs)(t.admonition,{type:"tip",children:[(0,r.jsxs)(t.p,{children:["It's not required to create a new contract, but if you want to create a new contract, you can do so by creating a new file in the ",(0,r.jsx)(t.code,{children:"src"})," directory."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"touch src/<Contract_Name>.sol\n"})})]})]}),(0,r.jsxs)(s.A,{value:"remix",label:"Remix",children:[(0,r.jsxs)(t.p,{children:["Create a new project with Remix. Under ",(0,r.jsx)(t.code,{children:"contracts"})," folder create a new file ",(0,r.jsx)(t.code,{children:"HelloBitcoin.sol"}),"."]}),(0,r.jsxs)(t.p,{children:["Add the following remappings in ",(0,r.jsx)(t.code,{children:"compiler_config.json"})," under ",(0,r.jsx)(t.code,{children:"settings"})]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'{\n  "language": "Solidity",\n  "settings": {\n    "optimizer": {\n      "enabled": true,\n      "runs": 200\n    },\n    "outputSelection": {\n      "*": {\n        "": ["ast"],\n        "*": [\n          "abi",\n          "metadata",\n          "devdoc",\n          "userdoc",\n          "storageLayout",\n          "evm.legacyAssembly",\n          "evm.bytecode",\n          "evm.deployedBytecode",\n          "evm.methodIdentifiers",\n          "evm.gasEstimates",\n          "evm.assembly"\n        ]\n      }\n    },\n    "remappings": [\n      "@openzeppelin/contracts/=https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/",\n      "@bob-collective/bitcoin-spv/=https://github.com/bob-collective/bitcoin-spv/blob/master/src/",\n      "@bob-collective/bob/=https://github.com/bob-collective/bob/blob/master/src/"\n    ]\n  }\n}\n'})}),(0,r.jsxs)(t.p,{children:["Enter the below code in ",(0,r.jsx)(t.code,{children:"HelloBitcoin.sol"})," file."]}),(0,r.jsxs)(t.p,{children:["To learn more about the Solidity contracts in general ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/v0.8.21/introduction-to-smart-contracts.html#subcurrency-example",children:"checkout the Solidity tutorial guide"}),"."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-solidity",children:'// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\nimport "@openzeppelin/contracts/token/ERC20/IERC20.sol";\nimport "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";\nimport {BTCUtils} from "@bob-collective/bitcoin-spv/BTCUtils.sol";\nimport {BitcoinTx} from "@bob-collective/bob/utils/BitcoinTx.sol";\nimport {IRelay} from "@bob-collective/bob/relay/IRelay.sol";\nimport {TestLightRelay} from "@bob-collective/bob/relay/TestLightRelay.sol";\n\nusing SafeERC20 for IERC20;\n\ncontract HelloBitcoin {\n\n    /**\n     * @dev Mapping to store BTC to USDT (or other ERC20) swap orders based on their unique identifiers.\n     * Each order is associated with a unique ID, and the order details are stored in the BtcSellOrder struct.\n     */\n    mapping(uint256 => BtcSellOrder) public btcSellOrders;\n\n    /**\n     * @dev Mapping to store ordinal sell orders for swapping BTC to USDT (or other ERC20) based on their unique identifiers.\n     * Each ordinal sell order is associated with a unique ID, and the order details are stored in the OrdinalSellOrder struct.\n     */\n    mapping(uint256 => OrdinalSellOrder) public ordinalSellOrders;\n\n    /**\n     * @dev The address of the ERC-20 contract. You can use this variable for any ERC-20 token,\n     * not just USDT (Tether). Make sure to set this to the appropriate ERC-20 contract address.\n     */\n    IERC20 public usdtContractAddress;\n\n    /**\n     * @dev Counter for generating unique identifiers for BTC to USDT swap orders.\n     * The `nextBtcOrderId` is incremented each time a new BTC to USDT swap order is created,\n     * ensuring that each order has a unique identifier.\n     */\n    uint256 nextBtcOrderId;\n\n    /**\n     * @dev Counter for generating unique identifiers for ordinal sell orders.\n     * The `nextOrdinalOrderId` is incremented each time a new ordinal sell order is created,\n     * ensuring that each ordinal order has a unique identifier.\n     */\n    uint256 nextOrdinalOrderId;\n\n    /**\n     * @dev Struct representing a BTC to USDT swap order.\n     */\n    struct BtcSellOrder {\n        uint256 sellAmountBtc; // Amount of BTC to be sold in the order.\n        uint256 buyAmount; // Amount of USDT (or other ERC20) to be bought in the order.\n        address btcSeller; // Address of the seller initiating the order.\n        BitcoinAddress btcBuyer; // Bitcoin address of the buyer (initialized with an empty scriptPubKey).\n        bool isOrderAccepted; // Flag indicating whether the order has been accepted.\n    }\n\n    /**\n     * @dev Struct representing an ordinal sell order for swapping Ordinal to USDT.\n     */\n    struct OrdinalSellOrder {\n        OrdinalId ordinalID; // Unique identifier for the ordinal sell order.\n        uint256 buyAmount; // Amount of USDT (or other ERC20) to be bought in the order.\n        BitcoinTx.UTXO utxo; // UTXO associated with the BTC to USDT swap order.\n        address ordinalSeller; // Address of the seller initiating the ordinal order.\n        BitcoinAddress ordinalBuyer; // Bitcoin address of the buyer (initialized with an empty scriptPubKey).\n        bool isOrderAccepted; // Flag indicating whether the ordinal order has been accepted.\n    }\n\n    /**\n     * @dev Struct representing a unique identifier for an ordinal sell order.\n     */\n    struct OrdinalId {\n        bytes32 txId; // Transaction ID associated with the ordinal order.\n        uint32 index; // Index associated with the ordinal order.\n    }\n\n    /**\n     * @dev Struct representing a Bitcoin address with a scriptPubKey.\n     */\n    struct BitcoinAddress {\n        bytes scriptPubKey; // Script public key associated with the Bitcoin address.\n    }\n\n    event btcSellOrderSuccessfullyPlaced(uint256 indexed orderId, uint256 sellAmountBtc, uint256 buyAmount);\n    event btcSellOrderBtcSellOrderAccepted(uint256 indexed id, BitcoinAddress bitcoinAddress);\n    event btcSuccessfullySendtoDestination(uint256 id);\n\n    event ordinalSellOrderSuccessfullyPlaced(uint256 indexed id, OrdinalId ordinalID, uint256 buyAmount);\n    event ordinalSellOrderBtcSellOrderAccepted(uint256 indexed id, BitcoinAddress bitcoinAddress);\n    event ordinalSuccessfullySendtoDestination(uint256 id);\n\n    IRelay internal relay;\n    TestLightRelay internal testLightRelay;\n\n    /**\n     * @dev Constructor to initialize the contract with the relay and ERC20 token address.\n     * @param _relay The relay contract implementing the IRelay interface.\n     * @param _usdtContractAddress The address of the USDT contract.\n     *\n     * Additional functionalities of the relay can be found in the documentation available at:\n     * https://docs.gobob.xyz/docs/contracts/src/src/relay/LightRelay.sol/contract.LightRelay\n     */\n    constructor(IRelay _relay, address _usdtContractAddress) {\n        relay = _relay;\n        testLightRelay = TestLightRelay(address(relay));\n        usdtContractAddress = IERC20(_usdtContractAddress);\n    }\n\n    /**\n     * @dev Set the relay contract for the bridge.\n     * @param _relay The relay contract implementing the IRelay interface.\n     */\n    function setRelay(IRelay _relay) internal {\n        relay = _relay;\n    }\n\n    /**\n     * @notice Places a BTC sell order in the contract.\n     * @dev Emits a `btcSellOrderSuccessfullyPlaced` event upon successful placement.\n     * @param sellAmountBtc The amount of BTC to sell.\n     * @param buyAmount The corresponding amount to be received in exchange for the BTC.\n     * @dev Requirements:\n     *   - `sellAmountBtc` must be greater than 0.\n     *   - `buyAmount` must be greater than 0.\n     */\n    function placeBtcSellOrder(uint256 sellAmountBtc, uint256 buyAmount) public {\n        require(sellAmountBtc > 0, "Sell amount must be greater than 0");\n        require(buyAmount > 0, "Buy amount must be greater than 0");\n\n        uint256 id = nextBtcOrderId++;\n        btcSellOrders[id] = BtcSellOrder({\n            sellAmountBtc: sellAmountBtc,\n            buyAmount: buyAmount,\n            btcSeller: msg.sender,\n            btcBuyer: BitcoinAddress({scriptPubKey: new bytes(0)}),\n            isOrderAccepted: false\n        });\n\n        emit btcSellOrderSuccessfullyPlaced(id, sellAmountBtc, buyAmount);\n    }\n\n    /**\n     * @notice Accepts a BTC sell order, providing the Bitcoin address for the buyer.\n     * @dev Transfers the corresponding currency from the buyer to the contract and updates the order details.\n     * @param id The unique identifier of the BTC sell order.\n     * @param bitcoinAddress The Bitcoin address of the buyer to receive the BTC.\n     * @dev Requirements:\n     *   - The specified order must not have been accepted previously.\n     *   - The buyer must transfer the required currency amount to the contract.\n     * @dev Emits a `btcSellOrderBtcSellOrderAccepted` event upon successful acceptance.\n     */\n    function acceptBtcSellOrder(uint256 id, BitcoinAddress calldata bitcoinAddress) public {\n        BtcSellOrder storage placedOrder = btcSellOrders[id];\n\n        require(placedOrder.isOrderAccepted == false, "Order has already been accepted");\n\n        // "lock" selling token by transferring to contract\n        IERC20(usdtContractAddress).safeTransferFrom(msg.sender, address(this), placedOrder.buyAmount);\n\n        placedOrder.btcBuyer = bitcoinAddress;\n        placedOrder.isOrderAccepted = true;\n\n        emit btcSellOrderBtcSellOrderAccepted(id, bitcoinAddress);\n    }\n\n    /**\n     * @notice Completes a BTC sell order by validating and processing the provided Bitcoin transaction proof.\n     * @dev This function is intended to be called by the original seller.\n     * @param id The unique identifier of the BTC sell order.\n     * @param transaction Information about the Bitcoin transaction.\n     * @param proof Proof associated with the Bitcoin transaction.\n     * @dev Requirements:\n     *   - The specified order must have been previously accepted.\n     *   - The caller must be the original seller of the BTC.\n     *   - The Bitcoin transaction proof must be valid.\n     *   - The BTC transaction output must match the expected amount and recipient.\n     * @dev Effects:\n     *   - Sets the relay difficulty based on the Bitcoin headers in the proof.\n     *   - Transfers the locked USDT amount to the original seller.\n     *   - Removes the order from the mapping after successful processing.\n     * @dev Emits a `btcSuccessfullySendtoDestination` event upon successful completion.\n     */\n    function completeBtcSellOrder(uint256 id, BitcoinTx.Info calldata transaction, BitcoinTx.Proof calldata proof)\n        public\n    {\n        // Retrieve the accepted order based on the provided ID\n        BtcSellOrder storage acceptedOrder = btcSellOrders[id];\n\n        // Ensure that the order has been accepted and the caller is the original seller\n        require(acceptedOrder.isOrderAccepted == true, "Order must be accepted");\n        require(acceptedOrder.btcSeller == msg.sender, "Only the original seller can provide proof");\n\n        // Set the difficulty of the relay based on the Bitcoin headers in the proof\n        testLightRelay.setDifficultyFromHeaders(proof.bitcoinHeaders);\n\n        // Validate the BTC transaction proof using the relay, in production a higher than 1 block confirmation should be used\n        BitcoinTx.validateProof(relay, 1, transaction, proof);\n\n        // Check if the BTC transaction output matches the expected amount and recipient\n        _checkBitcoinTxOutput(acceptedOrder.sellAmountBtc, acceptedOrder.btcBuyer, transaction);\n\n        // Transfer the locked USDT to the original seller\n        IERC20(usdtContractAddress).safeTransfer(acceptedOrder.btcSeller, acceptedOrder.buyAmount);\n\n        // Remove the order from the mapping since it has been successfully processed\n        delete btcSellOrders[id];\n\n        // Emit an event indicating the successful completion of the BTC to USDT swap\n        emit btcSuccessfullySendtoDestination(id);\n    }\n\n    /**\n     * @notice Places an ordinal sell order in the contract.\n     * @dev Emits an `ordinalSellOrderSuccessfullyPlaced` event upon successful placement.\n     * @param ordinalID The unique identifier for the ordinal.\n     * @param utxo Information about the Bitcoin UTXO associated with the ordinal.\n     * @param buyAmount The amount to be received in exchange for the ordinal.\n     * @dev Requirements:\n     *   - `buyAmount` must be greater than 0.\n     * @dev Effects:\n     *   - Creates a new ordinal sell order with the provided details.\n     */\n    function placeOrdinalSellOrder(OrdinalId calldata ordinalID, BitcoinTx.UTXO calldata utxo, uint256 buyAmount)\n        public\n    {\n        require(buyAmount > 0, "Buying amount should be greater than 0");\n\n        uint256 id = nextOrdinalOrderId++;\n\n        ordinalSellOrders[id] = OrdinalSellOrder({\n            ordinalID: ordinalID,\n            buyAmount: buyAmount,\n            utxo: utxo,\n            ordinalSeller: msg.sender,\n            isOrderAccepted: false,\n            ordinalBuyer: BitcoinAddress({scriptPubKey: new bytes(0)})\n        });\n\n        emit ordinalSellOrderSuccessfullyPlaced(id, ordinalID, buyAmount);\n    }\n\n    /**\n     * @notice Accepts an ordinal sell order, providing the Bitcoin address for the buyer.\n     * @dev Transfers the corresponding currency from the buyer to the contract and updates the order details.\n     * @param id The unique identifier of the ordinal sell order.\n     * @param bitcoinAddress The Bitcoin address of the buyer to receive the ordinal.\n     * @dev Requirements:\n     *   - The specified order must not have been accepted previously.\n     *   - The buyer must transfer the required currency amount to this contract.\n     * @dev Effects:\n     *   - "Locks" the selling token by transferring it to the contract.\n     *   - Updates the ordinal sell order with the buyer\'s Bitcoin address and marks the order as accepted.\n     * @dev Emits an `ordinalSellOrderBtcSellOrderAccepted` event upon successful acceptance.\n     */\n    function acceptOrdinalSellOrder(uint256 id, BitcoinAddress calldata bitcoinAddress) public {\n        OrdinalSellOrder storage placedOrder = ordinalSellOrders[id];\n        require(placedOrder.isOrderAccepted == false, "Order already accepted");\n\n        // "lock" sell token by transferring to contract\n        IERC20(usdtContractAddress).safeTransferFrom(msg.sender, address(this), placedOrder.buyAmount);\n\n        placedOrder.ordinalBuyer = bitcoinAddress;\n        placedOrder.isOrderAccepted = true;\n\n        emit ordinalSellOrderBtcSellOrderAccepted(id, bitcoinAddress);\n    }\n\n    /**\n     * @notice Completes an ordinal sell order by validating and processing the provided Bitcoin transaction proof.\n     * @dev This function is intended to be called by the original seller.\n     * @param id The unique identifier of the ordinal sell order.\n     * @param transaction Information about the Bitcoin transaction.\n     * @param proof Proof associated with the Bitcoin transaction.\n     * @dev Requirements:\n     *   - The specified order must have been previously accepted.\n     *   - The caller must be the original seller of the ordinal.\n     *   - The Bitcoin transaction proof must be valid.\n     *   - The BTC transaction input must spend the specified UTXO associated with the ordinal sell order.\n     *   - The BTC transaction output must be to the buyer\'s address.\n     * @dev Effects:\n     *   - Sets the relay difficulty based on the Bitcoin headers in the proof.\n     *   - Validates the BTC transaction proof using the relay.\n     *   - Ensures that the BTC transaction input spends the specified UTXO.\n     *   - Checks the BTC transaction output to the buyer\'s address.\n     *   - Transfers the locked USDT amount to the original seller.\n     *   - Removes the ordinal sell order from storage after successful processing.\n     * @dev Emits an `ordinalSuccessfullySendtoDestination` event upon successful completion.\n     */\n    function completeOrdinalSellOrder(uint256 id, BitcoinTx.Info calldata transaction, BitcoinTx.Proof calldata proof)\n        public\n    {\n        OrdinalSellOrder storage acceptedOrder = ordinalSellOrders[id];\n\n        // Ensure that the order has been accepted and the caller is the original seller\n        require(acceptedOrder.isOrderAccepted == true, "Order must be accepted");\n        require(acceptedOrder.ordinalSeller == msg.sender, "Only the original seller can provide proof");\n\n        // Set the relay difficulty based on the Bitcoin headers in the proof\n        testLightRelay.setDifficultyFromHeaders(proof.bitcoinHeaders);\n\n        // Validate the BTC transaction proof using the relay, in production a higher than 1 block confirmation should be used\n        BitcoinTx.validateProof(relay, 1, transaction, proof);\n\n        // Ensure that the BTC transaction input spends the specified UTXO associated with the ordinal sell order\n        BitcoinTx.ensureTxInputSpendsUtxo(transaction.inputVector, acceptedOrder.utxo);\n\n        // Check if the BTC transaction output is to the buyer\'s address\n        _checkBitcoinTxOutput(0, acceptedOrder.ordinalBuyer, transaction);\n\n        // ToDo: Check that the correct satoshis are being spent to the buyer\'s address if needed\n\n        // Transfer the locked USDT to the original seller\n        IERC20(usdtContractAddress).safeTransfer(acceptedOrder.ordinalSeller, acceptedOrder.buyAmount);\n\n        // Remove the ordinal sell order from storage as it has been successfully processed\n        delete ordinalSellOrders[id];\n\n        // Emit an event to indicate the successful completion of the ordinal sell order\n        emit ordinalSuccessfullySendtoDestination(id);\n    }\n\n    /**\n     * Checks output script pubkey (recipient address) and amount.\n     * Reverts if transaction amount is lower or bitcoin address is not found.\n     *\n     * @param expectedBtcAmount BTC amount requested in order.\n     * @param bitcoinAddress Recipient\'s bitcoin address.\n     * @param transaction Transaction fulfilling the order.\n     */\n    //ToDo: Should we move this into the library.\n    function _checkBitcoinTxOutput(\n        uint256 expectedBtcAmount,\n        BitcoinAddress storage bitcoinAddress,\n        BitcoinTx.Info calldata transaction\n    ) private view {\n        // Prefixes scriptpubkey with its size to match script output data.\n        bytes32 scriptPubKeyHash =\n            keccak256(abi.encodePacked(uint8(bitcoinAddress.scriptPubKey.length), bitcoinAddress.scriptPubKey));\n\n        uint256 txOutputValue = BitcoinTx\n            .processTxOutputs(transaction.outputVector, scriptPubKeyHash)\n            .value;\n\n        require(txOutputValue >= expectedBtcAmount, "Bitcoin transaction amount is lower than in accepted order.");\n    }\n}\n\n'})}),(0,r.jsxs)(t.p,{children:["Also create a ",(0,r.jsx)(t.code,{children:"TestLightRelay.sol"})," file for deploying your own bitcoin relay."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-solidity",children:'pragma solidity 0.8.17;\n\nimport {BTCUtils} from "@bob-collective/bitcoin-spv/BTCUtils.sol";\nimport "@bob-collective/bob/relay/LightRelay.sol";\n\n/**\n* @title HelloBitcoin\n* @dev contract allows swapping between BTC->USDT and Ordinal->USDT using the BTC relay on testnet.\n* @custom:dev-run-script ./scripts/deploy_relay.ts\n*/\ncontract TestLightRelay is LightRelay {\n    using BTCUtils for bytes;\n    using BTCUtils for uint256;\n\n      /// @notice Sets the current and previous difficulty based on the difficulty\n      ///         inferred from the provided Bitcoin headers.\n    function setDifficultyFromHeaders(bytes memory bitcoinHeaders) external {\n        uint256 firstHeaderDiff = bitcoinHeaders.extractTarget().calculateDifficulty();\n\n        currentEpochDifficulty = firstHeaderDiff;\n        prevEpochDifficulty = firstHeaderDiff;\n    }\n}\n\n'})})]})]}),"\n",(0,r.jsx)(t.h3,{id:"compile-the-contract",children:"Compile the Contract"}),"\n",(0,r.jsxs)(o.A,{groupId:"dev-env",children:[(0,r.jsxs)(s.A,{value:"foundry",label:"Foundry",children:[(0,r.jsx)(t.p,{children:"To compile the contract run the followling command:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"forge build\n"})})]}),(0,r.jsxs)(s.A,{value:"remix",label:"Remix",children:[(0,r.jsxs)(t.p,{children:["In ",(0,r.jsx)(t.code,{children:"Advanced Configurations"})," section of Solidity Compiler switch from ",(0,r.jsx)(t.code,{children:"Compiler configuration"})," to ",(0,r.jsx)(t.code,{children:"Use configuration file"}),"."]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Advance remix configuration image",src:n(2697).A+"",width:"321",height:"701"})}),(0,r.jsxs)(t.p,{children:["To compile the contract, go to the ",(0,r.jsx)(t.code,{children:"Solidity Compiler"})," section of the IDE, select and compile the ",(0,r.jsx)(t.code,{children:"HelloBitcoin"})," smart contract.\nYou can also directly compile the ",(0,r.jsx)(t.code,{children:"HelloBitcoin"})," smart contract by right-clicking on the ",(0,r.jsx)(t.code,{children:"HelloBitcoin.sol"})," file and select compile.\nIn the same way ",(0,r.jsx)(t.code,{children:"TestLightRelay.sol"})," contract should also be compiled."]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"deploy-the-hellobitcoin-contract",children:"Deploy the HelloBitcoin Contract"}),"\n",(0,r.jsxs)(o.A,{groupId:"dev-env",children:[(0,r.jsxs)(s.A,{value:"foundry",label:"Foundry",children:[(0,r.jsx)(t.p,{children:"To deploy the contract via the terminal, you'll need your private key. We recommend generating a separate key for development purposes."}),(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["If you are using MetaMask, use this ",(0,r.jsx)(t.a,{href:"https://support.metamask.io/hc/en-us/articles/360015289632-How-to-export-an-account-s-private-key",children:"guide"})," to export your private key."]})}),(0,r.jsxs)(t.p,{children:["To deploy the compiled smart contract on testnet we will use the ",(0,r.jsx)(t.code,{children:"HelloBitcoin"})," script present under ",(0,r.jsx)(t.code,{children:"scripts/HelloBitcoin.sol"}),":"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"export PRIVATE_KEY=0x<your-private-key>\nexport USDT_ADDRESS=0xF58de5056b7057D74f957e75bFfe865F571c3fB6\nexport RPC_URL=https://testnet.rpc.gobob.xyz\nexport VERIFIER_URL=https://testnet-explorer.gobob.xyz/api?\n\nforge script script/HelloBitcoin.sol --rpc-url=$RPC_URL --broadcast \\\n--verify --verifier blockscout --verifier-url=$VERIFIER_URL \\\n--priority-gas-price 1\n"})}),(0,r.jsx)(t.p,{children:"The output in the terminal should look similar to this:"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"Script ran successfully.\n...\n\u2705  [Success]Hash: 0x7a1653e0a0673bd363c28ebd610eb643b29408087f29bf1565df81ded78d2f8b\nContract Address: 0x14F932d0184d4595A3d152ec13F64A36393701B7\nBlock: 4325242\nPaid: 0.00551169309186155 ETH (1837231 gas * 3.00000005 gwei)\n\n\u2705  [Success]Hash: 0x1d8edfa2be54524804a69507cc967adbdc34716404c43b0d27b9b2375aaf221c\nContract Address: 0x141eE0F02Df17bE850032D578CC4b3BF7d1c7f4F\nBlock: 4325242\nPaid: 0.0082765501379425 ETH (2758850 gas * 3.00000005 gwei)\n"})})]}),(0,r.jsxs)(s.A,{value:"remix",label:"Remix",children:[(0,r.jsx)(t.p,{children:"To deploy the compiled HelloBitcoin smart contract first open the MetaMask extension and make sure the wallet is connected to the BOB network."}),(0,r.jsxs)(t.p,{children:["Choose the Remix ",(0,r.jsx)(t.code,{children:"ENVIRONMENT"})," and ",(0,r.jsx)(t.code,{children:"Injected Provider - MetaMask"}),". Remix will deploy contract to connected network, i.e., BOB."]}),(0,r.jsxs)(t.p,{children:["Select contract as ",(0,r.jsx)(t.code,{children:"TestLightRelay"}),". Click ",(0,r.jsx)(t.code,{children:"Deploy"})," and sign the transaction pop up message."]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Remix IDE image",src:n(3175).A+"",width:"415",height:"539"})}),(0,r.jsxs)(t.p,{children:["Copy the ",(0,r.jsx)(t.code,{children:"TestLightRelay"})," contract address from the terminal this will be used as a constructor argument for ",(0,r.jsx)(t.code,{children:"HelloBitcoin"})," contract."]}),(0,r.jsxs)(t.p,{children:["Select contract as ",(0,r.jsx)(t.code,{children:"HelloBitcoin"}),"."]}),(0,r.jsxs)(t.p,{children:["Add the ",(0,r.jsx)(t.code,{children:"_RELAY"})," ie ",(0,r.jsx)(t.code,{children:"TestLightRelay"})," address copied above."]}),(0,r.jsxs)(t.p,{children:["Add the ",(0,r.jsx)(t.code,{children:"_USDTCONTRACTADDRESS"})," address as ",(0,r.jsx)(t.code,{children:"0xF58de5056b7057D74f957e75bFfe865F571c3fB6"}),"."]}),(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["If you want, you can also modify the contract at a later stage and use ",(0,r.jsx)(t.a,{href:"/docs/build/contracts/",children:"other ERC20 contracts already deployed on BOB Sepolia (Testnet)"}),"."]})}),(0,r.jsxs)(t.p,{children:["Click ",(0,r.jsx)(t.code,{children:"Deploy"})," and sign the transaction pop up message."]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Remix IDE image",src:n(7432).A+"",width:"296",height:"647"})}),(0,r.jsx)(t.p,{children:"The contract details will be displayed in the Remix terminal."}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Remix IDE terminal image",src:n(5885).A+"",width:"1025",height:"606"})})]})]}),"\n",(0,r.jsx)(t.h3,{id:"interact-with-the-hellobitcoin-contract",children:"Interact with the HelloBitcoin Contract"}),"\n",(0,r.jsxs)(t.p,{children:["Checkout the ",(0,r.jsx)(t.a,{href:"https://testnet-explorer.gobob.xyz/",children:"testnet explorer"})," to get contract details using the transaction hash from the previous step."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Contract details on Explorer Image",src:n(5999).A+"",width:"2310",height:"1482"})}),"\n",(0,r.jsxs)(o.A,{groupId:"dev-env",children:[(0,r.jsxs)(s.A,{value:"foundry",label:"Foundry",children:[(0,r.jsxs)(t.p,{children:["Get the ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html",children:"ABI"})," of HelloBitcoin contract:"]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-shell",children:"forge build --silent && jq '.abi' ./out/HelloBitcoin.sol/HelloBitcoin.json > hello_bitcoin_contract_abi.json\n"})})]}),(0,r.jsx)(s.A,{value:"remix",label:"Remix",children:(0,r.jsxs)(t.p,{children:["Get the ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html",children:"ABI"})," of Coin contract from remix IDE under ",(0,r.jsx)(t.code,{children:"Solidity Compiler"})," section:"]})})]}),"\n",(0,r.jsx)(t.h3,{id:"congratulations-you-are-done",children:"Congratulations! You are done!"}),"\n",(0,r.jsx)(t.p,{children:"Congratulations! You have successfully deployed your first smart contract on BOB."}),"\n",(0,r.jsx)(t.h3,{id:"extra-publish-and-verify-the-hellobitcoin-contract",children:"Extra: Publish and verify the HelloBitcoin Contract"}),"\n",(0,r.jsxs)(o.A,{groupId:"dev-env",children:[(0,r.jsxs)(s.A,{value:"foundry",label:"Foundry",children:[(0,r.jsx)(t.p,{children:"The deployment script provided above already handles contract verification."}),(0,r.jsx)(t.p,{children:'You can find the contract source code in the "Code" tab, along with new "Read Contract" and "Write Contract" sub-tabs. You are now ready to interact with the contract directly on the explorer.'}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Verified coin contract on the chain explorer",src:n(4657).A+"",width:"1131",height:"578"})})]}),(0,r.jsxs)(s.A,{value:"remix",label:"Remix",children:[(0,r.jsx)(t.p,{children:"At this point, your smart contract is ready to be used, but we can go a step further to verify and publish the smart contract in the explorer. By doing this you will be able to interact with any existing read or write calls in the contract right on the explorer. To do so follow these steps:"}),(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Go to the Remix IDE. Check if the contract imports other contracts. If it does, check step 2. If it doesn't, simply copy the contract code into your clipboard and jump to step 3."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"In case your contract imports other contract, you need to flatten your contract. To do that you just need right click your contract file in Remix IDE file explorer and copy the flattened code into your clipboard."}),"\n"]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Flatten contract on Remix IDE",src:n(607).A+"",width:"315",height:"538"})}),(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Head over to the ",(0,r.jsx)(t.a,{href:"https://testnet-explorer.gobob.xyz/",children:"testnet explorer"})," and search for your published contract page."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:'Click on the "Contract" tab and click on "Verify & Publish" button.'}),"\n"]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Explore Tab on the chain explorer",src:n(1309).A+"",width:"2448",height:"664"})}),(0,r.jsxs)(t.ol,{start:"5",children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:'Click on the "Code" tab and click on "Verify & Publish" button.'}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:'Now you should be presented we a set of possilities for verifying you published contract, but we will proceed with "Via flattened source code".'}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Fill the form with the specific information about the contract and how it was deployed. Make sure every field is correctly populated before submitting. Any incorrect field will lead to a failed verification. After submitting, the verification might take a couple of minutes."}),"\n"]}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Verifying the coin contract on the chain explorer",src:n(2366).A+"",width:"1548",height:"1448"})}),(0,r.jsxs)(t.ol,{start:"8",children:["\n",(0,r.jsx)(t.li,{children:'Once submitted correctly, the contract source code should be visible in the "Code" tab, alongside with new "Read Contract" and "Write Contract". You are now ready to interact with the contract right on the explorer.'}),"\n"]}),(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Verified coin contract on the chain explorer",src:n(4657).A+"",width:"1131",height:"578"})})]})]}),"\n",(0,r.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(t.p,{children:"BOB is built to make it easy to interact with Bitcoin."}),"\n",(0,r.jsx)(t.h3,{id:"join-the-community",children:"Join the Community"}),"\n",(0,r.jsxs)(t.p,{children:["Join the ",(0,r.jsx)(t.a,{href:"https://t.me/+CyIcLW2nfaFlNDc1",children:"Telegram"})," to connect with the community and ask questions."]}),"\n",(0,r.jsx)(t.h3,{id:"check-out-examples",children:"Check out Examples"}),"\n",(0,r.jsxs)(t.p,{children:["Check out examples of how to work with a BTC light client, ordinals, and unifying assets: ",(0,r.jsx)(t.a,{href:"/docs/build/getting-started/#examples",children:"Example list"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["We recommend taking a look at our ",(0,r.jsx)(t.a,{href:"https://docs.gobob.xyz/docs/build/examples/btc-swap/",children:"Trustless P2P Swap"})," example first."]}),"\n",(0,r.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://github.com/bob-collective/StarterKit/blob/main/src/HelloBitcoin.sol",children:"HelloBitcoin contract code"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://remix.ethereum.org/",children:"Remix"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://book.getfoundry.sh/",children:"Foundry"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"networks",children:"BOB Sepolia (Testnet)"})}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>s});n(6540);var r=n(4164);const i={tabItem:"tabItem_Ymn6"};var o=n(4848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,s),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>B});var r=n(6540),i=n(4164),o=n(3104),s=n(6347),a=n(205),c=n(7485),l=n(1682),d=n(679);function h(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:i}}=e;return{value:t,label:n,attributes:r,default:i}}))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const i=(0,s.W6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(i.location.search);t.set(o,e),i.replace({...i.location,search:t.toString()})}),[o,i])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,o=u(e),[s,c]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[l,h]=m({queryString:n,groupId:i}),[f,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,o]=(0,d.Dv)(n);return[i,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:i}),x=(()=>{const e=l??f;return p({value:e,tabValues:o})?e:null})();(0,a.A)((()=>{x&&c(x)}),[x]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);c(e),h(e),b(e)}),[h,b,o]),tabValues:o}}var b=n(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=n(4848);function g(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),i=a[n].value;i!==r&&(l(t),s(i))},h=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t),children:a.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>c.push(e),onKeyDown:h,onClick:d,...o,className:(0,i.A)("tabs__item",x.tabItem,o?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:o}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function j(e){const t=f(e);return(0,y.jsxs)("div",{className:(0,i.A)("tabs-container",x.tabList),children:[(0,y.jsx)(g,{...t,...e}),(0,y.jsx)(v,{...t,...e})]})}function B(e){const t=(0,b.A)();return(0,y.jsx)(j,{...e,children:h(e.children)},String(t))}},2697:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/advance_remix_configuration-943c5710d0050bd9743d348fdc68d3f3.png"},5999:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/deployed_hello_bitcoin_contract-f40c30018f982082b298dce0c32a465d.png"},1309:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/explorer_code_tab-5a3b35b5c95a9b4523bc7b46fbc014f7.png"},7432:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/remix_ide-2c67fba999228e483d31795d1f35bed4.png"},607:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/remix_ide_flatten-67976fce00ff2ffb649dd7c1fd75019a.png"},5885:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/remix_ide_terminal-cfecca87926b0d3f3cefa8e5be98819d.png"},3175:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/test_light_relay-d1656d169ef1f0992434b598727e3952.png"},4657:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/verified_contract_explorer-1215f58ad435cc8a6ff75e924d9662d8.png"},2366:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/verifying_contract_explorer-5c4e7ed06fc6b9143b559a61cf54c67a.png"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var r=n(6540);const i={},o=r.createContext(i);function s(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);