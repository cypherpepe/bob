"use strict";(self.webpackChunkBOB_docs=self.webpackChunkBOB_docs||[]).push([[3039],{9531:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>r,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=t(4848),i=t(8453);const o={sidebar_position:2,sidebar_label:"BOB Bitcoin MetaMask Snap"},a="BOB Bitcoin MetaMask Snap",c={id:"build/bob-sdk/metamask-snap",title:"BOB Bitcoin MetaMask Snap",description:"MetaMask Snaps allow us to add features and functionality to the standard MetaMask wallet.",source:"@site/docs/build/bob-sdk/metamask-snap.md",sourceDirName:"build/bob-sdk",slug:"/build/bob-sdk/metamask-snap",permalink:"/docs/build/bob-sdk/metamask-snap",draft:!1,unlisted:!1,editUrl:"https://github.com/bob-collective/bob/tree/master/docs/docs/build/bob-sdk/metamask-snap.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"BOB Bitcoin MetaMask Snap"},sidebar:"buildSidebar",previous:{title:"BOB Gateway",permalink:"/docs/build/bob-sdk/gateway"},next:{title:"Interact with Bitcoin from BOB Smart Contracts",permalink:"/docs/build/bob-sdk/relay"}},r={},d=[{value:"Features",id:"features",level:2},{value:"Usage",id:"usage",level:2},{value:"Connecting to the BOB BTC Snap",id:"connecting-to-the-bob-btc-snap",level:3},{value:"Getting the extended public key",id:"getting-the-extended-public-key",level:3},{value:"Using the BOB BTC Snap in a React application",id:"using-the-bob-btc-snap-in-a-react-application",level:3}];function l(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"bob-bitcoin-metamask-snap",children:"BOB Bitcoin MetaMask Snap"})}),"\n",(0,s.jsx)(e.p,{children:"MetaMask Snaps allow us to add features and functionality to the standard MetaMask wallet.\nThe BOB Bitcoin Snap is a MetaMask Snap that allows you to use MetaMask to interact with Bitcoin on the BOB network."}),"\n",(0,s.jsx)(e.h2,{id:"features",children:"Features"}),"\n",(0,s.jsx)(e.p,{children:"Use MetaMask to:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Send Bitcoin"}),"\n",(0,s.jsx)(e.li,{children:"Receive Bitcoin"}),"\n",(0,s.jsx)(e.li,{children:"Cache the extended public key"}),"\n",(0,s.jsx)(e.li,{children:"Sign Bitcoin transactions"}),"\n",(0,s.jsx)(e.li,{children:"Inscribe Ordinals (text and images) including BRC20s"}),"\n",(0,s.jsx)(e.li,{children:"Send inscriptions (including BRC20s)"}),"\n"]}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["Take a look at the ",(0,s.jsx)(e.a,{href:"https://github.com/bob-collective/btcsnap",children:"BTC Snap source code"})," and ",(0,s.jsx)(e.a,{href:"../examples/metamask-ordinals/",children:"our MetaMask Snap demo application"})]})}),"\n",(0,s.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(e.h3,{id:"connecting-to-the-bob-btc-snap",children:"Connecting to the BOB BTC Snap"}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["To see how to connect to the BOB BTC Snap and call the available methods, take a look at the ",(0,s.jsx)(e.a,{href:"https://github.com/bob-collective/demo-unified-assets-tracker/blob/1475ef915518d45103cd4581c3901ede216a6197/ui/src/utils/btcsnap.ts",children:"utils.ts"})," file in our demo app."]})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { MetaMaskInpageProvider } from "@metamask/providers";\n\ndeclare global {\n  interface Window {\n    ethereum: MetaMaskInpageProvider;\n  }\n}\n\nconst { ethereum } = window;\n\nconst snapId = "npm:@gobob/btcsnap";\n\nexport async function checkConnection(): Promise<boolean> {\n  const snaps = await ethereum.request({\n    method: "wallet_getSnaps",\n  });\n\n  const hasMySnap = Object.keys(snaps || []).includes(snapId);\n\n  return hasMySnap;\n}\n\nexport async function connect(cb: (connected: boolean) => void) {\n  let connected = false;\n  try {\n    const result: any = await ethereum.request({\n      method: "wallet_requestSnaps",\n      params: {\n        [snapId]: {},\n      },\n    });\n\n    const hasError = !!result?.snaps?.[snapId]?.error;\n    connected = !hasError;\n  } finally {\n    cb(connected);\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"getting-the-extended-public-key",children:"Getting the extended public key"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'export enum BitcoinNetwork {\n  Main = "mainnet",\n  Test = "testnet",\n}\n\nexport enum BitcoinScriptType {\n  P2PKH = "P2PKH",\n  P2SH_P2WPKH = "P2SH-P2WPKH",\n  P2WPKH = "P2WPKH",\n}\n\nexport interface ExtendedPublicKey {\n  xpub: string;\n  mfp: string;\n}\n\nexport async function getExtendedPublicKey(\n  network: BitcoinNetwork,\n  scriptType: BitcoinScriptType\n): Promise<ExtendedPublicKey> {\n  const networkParams = network === BitcoinNetwork.Main ? "main" : "test";\n\n  try {\n    return (await ethereum.request({\n      method: "wallet_invokeSnap",\n      params: {\n        snapId,\n        request: {\n          method: "btc_getPublicExtendedKey",\n          params: {\n            network: networkParams,\n            scriptType,\n          },\n        },\n      },\n    })) as ExtendedPublicKey;\n  } catch (err: any) {\n    const error = new SnapError(\n      err?.message || "Get extended public key failed"\n    );\n    console.error(error);\n    throw error;\n  }\n}\n'})}),"\n",(0,s.jsx)(e.h3,{id:"using-the-bob-btc-snap-in-a-react-application",children:"Using the BOB BTC Snap in a React application"}),"\n",(0,s.jsx)(e.admonition,{type:"tip",children:(0,s.jsxs)(e.p,{children:["Take a look at the ",(0,s.jsx)(e.a,{href:"https://github.com/bob-collective/demo-unified-assets-tracker/tree/1475ef915518d45103cd4581c3901ede216a6197/ui",children:"UI code in our demo application"})," to see how this hook can be used."]})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'import { useCallback, useEffect, useState } from "react";\nimport { addressFromExtPubKey } from "../utils/btcsnap-signer";\nimport {\n  BitcoinNetwork,\n  BitcoinScriptType,\n  checkConnection,\n  connect,\n  getExtendedPublicKey,\n} from "../utils/btcsnap-utils";\nimport { useLocalStorage, LocalStorageKey } from "./useLocalStorage";\nimport { useGetInscriptionIds } from "./useGetInscriptionIds";\nimport { useQueryClient } from "@tanstack/react-query";\nimport { BITCOIN_NETWORK } from "../utils/config";\n\nconst bitcoinNetwork =\n  BITCOIN_NETWORK === "mainnet" ? BitcoinNetwork.Main : BitcoinNetwork.Test;\n\nconst getDerivedBtcAddress = async () => {\n  const xpub = await getExtendedPublicKey(\n    bitcoinNetwork,\n    BitcoinScriptType.P2WPKH\n  );\n\n  const bitcoinAddress = addressFromExtPubKey(xpub.xpub, bitcoinNetwork)!;\n\n  return {\n    bitcoinAddress,\n  };\n};\n\nconst connectionCheck = async () => {\n  const isConnected = await checkConnection();\n\n  return isConnected;\n};\n\nconst useBtcSnap = () => {\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n\n  const queryClient = useQueryClient();\n  const [bitcoinAddress, setBitcoinAddress, removeBitcoinAddress] =\n    useLocalStorage(LocalStorageKey.DERIVED_BTC_ADDRESS);\n\n  const { refetch } = useGetInscriptionIds(bitcoinAddress);\n\n  useEffect(() => {\n    if (!bitcoinAddress) return;\n\n    refetch();\n  }, [bitcoinAddress, refetch]);\n\n  const connectBtcSnap = useCallback(async () => {\n    connect(async (connected: boolean) => {\n      if (connected) {\n        const { bitcoinAddress } = await getDerivedBtcAddress();\n        setBitcoinAddress(bitcoinAddress);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setBitcoinAddress]);\n\n  useEffect(() => {\n    const checkConnection = async () => {\n      const connected = await connectionCheck();\n\n      // This will reset BTC address if user has disconnected\n      if (!connected && bitcoinAddress) {\n        removeBitcoinAddress();\n        queryClient.removeQueries();\n      }\n\n      setIsConnected(connected);\n    };\n\n    checkConnection();\n  }, [\n    bitcoinAddress,\n    isConnected,\n    queryClient,\n    removeBitcoinAddress,\n    setBitcoinAddress,\n  ]);\n\n  return { connectBtcSnap, bitcoinAddress, isConnected };\n};\n\nexport { useBtcSnap };\n'})})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>c});var s=t(6540);const i={},o=s.createContext(i);function a(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);